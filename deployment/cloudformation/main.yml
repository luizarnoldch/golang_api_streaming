AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito APIGATEWAY test

Parameters:
  ProjectName:
    Type: String
    Description: Proyecto Residentes para Tendencias de Arquitectura de Software
    Default: StreamProyect
  Stage:
    Type: String
    Description: Stage of API GATEWAY
    Default: dev

Resources:
  StreamTableKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'KMS Key for encrypting the StreamTable'
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

  StreamTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub "${ProjectName}-StreamTable"
      AttributeDefinitions:
        - AttributeName: stream_id
          AttributeType: S
      KeySchema:
        - AttributeName: stream_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref StreamTableKMSKey

  StreamAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "stream-apigateway-${Stage}"
      StageName: !Ref Stage
      OpenApiVersion: '2.0'
      Description: API supporting the application
      TracingEnabled: true
      Variables:
        LAMBDA_ALIAS: !Ref Stage
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,DELETE,GET,HEAD,POST,PUT'"
        AllowOrigin: "'*'"

  HolaMundoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/hola_mundo.zip
      FunctionName: !Sub "${ProjectName}-hola_mundo"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
      Events:
        HolaMundo:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref StreamAPIGateway

  UpdateStreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/update_stream.zip
      FunctionName: !Sub "${ProjectName}-update_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
      Events:
        UpdateStream:
          Type: Api
          Properties:
            Path: /streams/{stream_id}
            Method: put
            RestApiId: !Ref StreamAPIGateway

  GetSreamByIDFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/get_item_by_id.zip
      FunctionName: !Sub "${ProjectName}-get_item_by_id"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
      Events:
        GetStreamByID:
          Type: Api
          Properties:
            Path: /streams/{stream_id}
            Method: get
            RestApiId: !Ref StreamAPIGateway

  GetAllSreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/get_all_stream.zip
      FunctionName: !Sub "${ProjectName}-get_all_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
      Events:
        GetAllStream:
          Type: Api
          Properties:
            Path: /streams
            Method: get
            RestApiId: !Ref StreamAPIGateway
  
  DeleteSreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/delete_stream.zip
      FunctionName: !Sub "${ProjectName}-delete_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
      Events:
        DeleteStream:
          Type: Api
          Properties:
            Path: /streams/{stream_id}
            Method: delete
            RestApiId: !Ref StreamAPIGateway
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: "LambdaDynamoDBPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: "arn:aws:dynamodb:us-east-1:681318508133:table/StreamTable"

  CreateSreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/create_stream.zip
      FunctionName: !Sub "${ProjectName}-create_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Role: !GetAtt LambdaExecutionRole.Arn
      # Policies:
      #   - DynamoDBCrudPolicy:
      #       TableName: !Ref StreamTable
      Events:
        CreateStream:
          Type: Api
          Properties:
            Path: /streams
            Method: post
            RestApiId: !Ref StreamAPIGateway

Outputs:
  StreamTable:
    Description: Stream Accounts DynamoDB Table
    Value: !Ref StreamTable

  StreamAPIGateway:
    Description: "API Gateway endpoint URL para documentos"
    Value: !Sub "https://${StreamAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
