AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito APIGATEWAY test

Parameters:
  ProjectName:
    Type: String
    Description: Proyecto Residentes para Tendencias de Arquitectura de Software
    Default: StreamProyect
  Stage:
    Type: String
    Description: Stage of API GATEWAY
    Default: dev

Resources:

  # *** Cognito ***

  PreSignupTriggerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/pre-sign-up.zip
      FunctionName: !Sub "${ProjectName}-test-pre-sign-up"
      Handler: bootstrap
      Runtime: provided.al2

  PostConfirmationTriggerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/post_confirmation.zip
      FunctionName: !Sub "${ProjectName}-test-post-confirmation"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
  
  PreAuthenticationTriggerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/pre-auth.zip
      FunctionName: !Sub "${ProjectName}-test-pre-auth"
      Handler: bootstrap
      Runtime: provided.al2
  
  PostAuthenticationTriggerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/post-auth.zip
      FunctionName: !Sub "${ProjectName}-test-post-auth"
      Handler: bootstrap
      Runtime: provided.al2
  
  PreTokenGenerationTriggerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/pre-token-auth.zip
      FunctionName: !Sub "${ProjectName}-test-pre-token-auth"
      Handler: bootstrap
      Runtime: provided.al2
  
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DependsOn: 
      - PreSignupTriggerFunction
    Properties:
      UserPoolName: !Sub ${ProjectName}-cognitostream
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      MfaConfiguration: "OFF"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate: 
          - email
      Schema:
        - AttributeDataType: "String"
          Mutable: true
          Name: email
          Required: true
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupTriggerFunction.Arn
        PostConfirmation: !GetAtt PostConfirmationTriggerFunction.Arn
        PreAuthentication : !GetAtt PreAuthenticationTriggerFunction.Arn
        PostAuthentication: !GetAtt PostAuthenticationTriggerFunction.Arn
        PreTokenGeneration: !GetAtt PreTokenGenerationTriggerFunction.Arn

  LambdaPresignupPermission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - PreSignupTriggerFunction
    Properties:
      FunctionName: !GetAtt PreSignupTriggerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  LambdaPostConfirmationPermission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - PostConfirmationTriggerFunction
    Properties:
      FunctionName: !GetAtt PostConfirmationTriggerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn
  
  PreAuthenticationPermission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - PreAuthenticationTriggerFunction
    Properties:
      FunctionName: !GetAtt PreAuthenticationTriggerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn
  
  PostAuthenticationTriggerPermission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - PostAuthenticationTriggerFunction
    Properties:
      FunctionName: !GetAtt PostAuthenticationTriggerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  PreTokenGenerationTriggerPermission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - PreTokenGenerationTriggerFunction
    Properties:
      FunctionName: !GetAtt PreTokenGenerationTriggerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub ${ProjectName}-cognitostreamdomain
      UserPoolId: !Ref CognitoUserPool

  CognitoTestGoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    DependsOn: CognitoUserPool
    Properties:
      ProviderName: Google
      ProviderType: Google
      UserPoolId: !Ref CognitoUserPool
      AttributeMapping: 
        email: 'email'
        family_name: 'family_name'
        given_name: 'given_name'
        name: 'name'
        username: 'sub'
      ProviderDetails:
        client_id: !Sub GoogleClientId
        client_secret: !Sub GoogleClientSecret
        authorize_scopes: "openid email profile"

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoTestGoogleIdentityProvider
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub ${ProjectName}-cognitostreamclient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH 
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
      AuthSessionValidity: 3
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: minutes
        RefreshToken: days
        IdToken: minutes
      EnableTokenRevocation: true
      PreventUserExistenceErrors: ENABLED
      CallbackURLs:
        - "http://localhost:3000/callback"
      LogoutURLs:
        - "http://localhost:3000"
      SupportedIdentityProviders:
        - "COGNITO"
        - "Google"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - phone
        - profile
        - aws.cognito.signin.user.admin

  # *** API ***

  GlobalTableKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'KMS Key for encrypting the StreamTable'
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

  StreamTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub "${ProjectName}-StreamTable"
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref GlobalTableKMSKey

  UserTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub "${ProjectName}-UserTable"
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref GlobalTableKMSKey

  CentralAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "stream-apigateway-${Stage}"
      StageName: !Ref Stage
      OpenApiVersion: '2.0'
      Description: API supporting the application
      TracingEnabled: true
      Variables:
        LAMBDA_ALIAS: !Ref Stage
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,DELETE,GET,HEAD,POST,PUT'"
        AllowOrigin: "'*'"

  HolaMundoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/hola_mundo.zip
      FunctionName: !Sub "${ProjectName}-hola_mundo"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        HolaMundo:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref CentralAPIGateway

  UpdateStreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/update_stream.zip
      FunctionName: !Sub "${ProjectName}-update_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        UpdateStream:
          Type: Api
          Properties:
            Path: /streams/{stream_id}
            Method: put
            RestApiId: !Ref CentralAPIGateway

  GetSreamByIDFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/get_item_by_id.zip
      FunctionName: !Sub "${ProjectName}-get_item_by_id"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        GetStreamByID:
          Type: Api
          Properties:
            Path: /streams/{stream_id}
            Method: get
            RestApiId: !Ref CentralAPIGateway

  GetAllSreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/get_all_stream.zip
      FunctionName: !Sub "${ProjectName}-get_all_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        GetAllStream:
          Type: Api
          Properties:
            Path: /streams
            Method: get
            RestApiId: !Ref CentralAPIGateway
  
  DeleteSreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/delete_stream.zip
      FunctionName: !Sub "${ProjectName}-delete_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        DeleteStream:
          Type: Api
          Properties:
            Path: /streams/{stream_id}
            Method: delete
            RestApiId: !Ref CentralAPIGateway

  CreateSreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/create_stream.zip
      FunctionName: !Sub "${ProjectName}-create_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        CreateStream:
          Type: Api
          Properties:
            Path: /streams
            Method: post
            RestApiId: !Ref CentralAPIGateway
  
  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/update_user.zip
      FunctionName: !Sub "${ProjectName}-update_user"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        UpdateStream:
          Type: Api
          Properties:
            Path: /users/{user_id}
            Method: put
            RestApiId: !Ref CentralAPIGateway

  GetUserByIDFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/get_user_by_id.zip
      FunctionName: !Sub "${ProjectName}-get_user_by_id"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        GetStreamByID:
          Type: Api
          Properties:
            Path: /users/{user_id}
            Method: get
            RestApiId: !Ref CentralAPIGateway

  GetAllUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/get_all_user.zip
      FunctionName: !Sub "${ProjectName}-get_all_user"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        GetAllStream:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref CentralAPIGateway
  
  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/delete_user.zip
      FunctionName: !Sub "${ProjectName}-delete_user"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        DeleteStream:
          Type: Api
          Properties:
            Path: /users/{user_id}
            Method: delete
            RestApiId: !Ref CentralAPIGateway

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/create_user.zip
      FunctionName: !Sub "${ProjectName}-create_user"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        CreateStream:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref CentralAPIGateway

Outputs:
  StreamTable:
    Description: Stream Accounts DynamoDB Table
    Value: !Ref StreamTable
  
  UserTable:
    Description: User Accounts DynamoDB Table
    Value: !Ref UserTable

  CentralAPIGateway:
    Description: "API Gateway endpoint URL para documentos"
    Value: !Sub "https://${CentralAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  
  CognitoUserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref CognitoUserPool

  CognitoUserPoolDomain:
    Description: Domain of the Cognito User Pool
    Value: !Ref CognitoUserPoolDomain
    
  CognitoUserPoolClient:
    Description: Client of the Cognito User Pool
    Value: !Ref CognitoUserPoolClient