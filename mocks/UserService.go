// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	model "main/src/users/domain/model"
	error "main/utils/error"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserService) CreateUser(user *model.User) (*model.User, *error.Error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 *error.Error
	if rf, ok := ret.Get(0).(func(*model.User) (*model.User, *error.Error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) *error.Error); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error.Error)
		}
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: userID
func (_m *UserService) DeleteUser(userID string) *error.Error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *error.Error
	if rf, ok := ret.Get(0).(func(string) *error.Error); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*error.Error)
		}
	}

	return r0
}

// GetAllUser provides a mock function with given fields:
func (_m *UserService) GetAllUser() ([]model.User, *error.Error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUser")
	}

	var r0 []model.User
	var r1 *error.Error
	if rf, ok := ret.Get(0).(func() ([]model.User, *error.Error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func() *error.Error); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error.Error)
		}
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *UserService) GetUserByID(userID string) (*model.User, *error.Error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 *error.Error
	if rf, ok := ret.Get(0).(func(string) (*model.User, *error.Error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *error.Error); ok {
		r1 = rf(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error.Error)
		}
	}

	return r0, r1
}

// UpdateUserByID provides a mock function with given fields: userID, user
func (_m *UserService) UpdateUserByID(userID string, user *model.User) (*model.User, *error.Error) {
	ret := _m.Called(userID, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserByID")
	}

	var r0 *model.User
	var r1 *error.Error
	if rf, ok := ret.Get(0).(func(string, *model.User) (*model.User, *error.Error)); ok {
		return rf(userID, user)
	}
	if rf, ok := ret.Get(0).(func(string, *model.User) *model.User); ok {
		r0 = rf(userID, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.User) *error.Error); ok {
		r1 = rf(userID, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error.Error)
		}
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
