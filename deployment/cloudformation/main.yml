AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito APIGATEWAY test

Parameters:
  ProjectName:
    Type: String
    Description: Proyecto Residentes para Tendencias de Arquitectura de Software
    Default: StreamProyect
  Stage:
    Type: String
    Description: Stage of API GATEWAY
    Default: dev

Resources:

  # *** Cognito ***

  

  # *** API ***

  GlobalTableKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'KMS Key for encrypting the StreamTable'
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

  StreamTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub "${ProjectName}-StreamTable"
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref GlobalTableKMSKey

  UserTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub "${ProjectName}-UserTable"
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref GlobalTableKMSKey

  CentralAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "stream-apigateway-${Stage}"
      StageName: !Ref Stage
      OpenApiVersion: '2.0'
      Description: API supporting the application
      TracingEnabled: true
      Variables:
        LAMBDA_ALIAS: !Ref Stage
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,DELETE,GET,HEAD,POST,PUT'"
        AllowOrigin: "'*'"

  HolaMundoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/hola_mundo.zip
      FunctionName: !Sub "${ProjectName}-hola_mundo"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        HolaMundo:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref CentralAPIGateway

  UpdateStreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/update_stream.zip
      FunctionName: !Sub "${ProjectName}-update_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        UpdateStream:
          Type: Api
          Properties:
            Path: /streams/{stream_id}
            Method: put
            RestApiId: !Ref CentralAPIGateway

  GetSreamByIDFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/get_item_by_id.zip
      FunctionName: !Sub "${ProjectName}-get_item_by_id"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        GetStreamByID:
          Type: Api
          Properties:
            Path: /streams/{stream_id}
            Method: get
            RestApiId: !Ref CentralAPIGateway

  GetAllSreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/get_all_stream.zip
      FunctionName: !Sub "${ProjectName}-get_all_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        GetAllStream:
          Type: Api
          Properties:
            Path: /streams
            Method: get
            RestApiId: !Ref CentralAPIGateway
  
  DeleteSreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/delete_stream.zip
      FunctionName: !Sub "${ProjectName}-delete_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        DeleteStream:
          Type: Api
          Properties:
            Path: /streams/{stream_id}
            Method: delete
            RestApiId: !Ref CentralAPIGateway

  CreateSreamFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/create_stream.zip
      FunctionName: !Sub "${ProjectName}-create_stream"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        CreateStream:
          Type: Api
          Properties:
            Path: /streams
            Method: post
            RestApiId: !Ref CentralAPIGateway
  
  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/update_user.zip
      FunctionName: !Sub "${ProjectName}-update_user"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        UpdateStream:
          Type: Api
          Properties:
            Path: /users/{user_id}
            Method: put
            RestApiId: !Ref CentralAPIGateway

  GetUserByIDFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/get_user_by_id.zip
      FunctionName: !Sub "${ProjectName}-get_user_by_id"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        GetStreamByID:
          Type: Api
          Properties:
            Path: /users/{user_id}
            Method: get
            RestApiId: !Ref CentralAPIGateway

  GetAllUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/get_all_user.zip
      FunctionName: !Sub "${ProjectName}-get_all_user"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        GetAllStream:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref CentralAPIGateway
  
  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/delete_user.zip
      FunctionName: !Sub "${ProjectName}-delete_user"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        DeleteStream:
          Type: Api
          Properties:
            Path: /users/{user_id}
            Method: delete
            RestApiId: !Ref CentralAPIGateway

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/create_user.zip
      FunctionName: !Sub "${ProjectName}-create_user"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10 # Tiempo en segundos
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          ENV: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - KMSDecryptPolicy:
            KeyId: !GetAtt GlobalTableKMSKey.Arn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt GlobalTableKMSKey.Arn
      Events:
        CreateStream:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref CentralAPIGateway

Outputs:
  StreamTable:
    Description: Stream Accounts DynamoDB Table
    Value: !Ref StreamTable
  
  UserTable:
    Description: User Accounts DynamoDB Table
    Value: !Ref UserTable

  CentralAPIGateway:
    Description: "API Gateway endpoint URL para documentos"
    Value: !Sub "https://${CentralAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
